{"id":"../node_modules/rxjs/dist/esm5/internal/operators/reduce.js","dependencies":[{"name":"C:\\Appleseeds\\angular-project\\rxjs\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\reduce.js.map","includedInParent":true,"mtime":1647189212438},{"name":"C:\\Appleseeds\\angular-project\\rxjs\\node_modules\\rxjs\\src\\internal\\operators\\reduce.ts","includedInParent":true,"mtime":1647189212438},{"name":"C:\\Appleseeds\\angular-project\\rxjs\\package.json","includedInParent":true,"mtime":1625261731954},{"name":"C:\\Appleseeds\\angular-project\\rxjs\\node_modules\\rxjs\\package.json","includedInParent":true,"mtime":1647189212438},{"name":"./scanInternals","loc":{"line":1,"column":30,"index":30},"parent":"C:\\Appleseeds\\angular-project\\rxjs\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\reduce.js","resolved":"C:\\Appleseeds\\angular-project\\rxjs\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\scanInternals.js"},{"name":"../util/lift","loc":{"line":2,"column":24,"index":73},"parent":"C:\\Appleseeds\\angular-project\\rxjs\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\reduce.js","resolved":"C:\\Appleseeds\\angular-project\\rxjs\\node_modules\\rxjs\\dist\\esm5\\internal\\util\\lift.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.reduce = reduce;\n\nvar _scanInternals = require(\"./scanInternals\");\n\nvar _lift = require(\"../util/lift\");\n\nfunction reduce(accumulator, seed) {\n  return (0, _lift.operate)((0, _scanInternals.scanInternals)(accumulator, seed, arguments.length >= 2, false, true));\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../../src/internal/operators/reduce.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../../src/internal/operators/reduce.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../../src/internal/operators/reduce.ts","name":null,"original":{"line":60,"column":6},"generated":{"line":12,"column":0}},{"source":"../../../../src/internal/operators/reduce.ts","name":null,"original":{"line":60,"column":16},"generated":{"line":12,"column":9}},{"source":"../../../../src/internal/operators/reduce.ts","name":null,"original":{"line":60,"column":6},"generated":{"line":12,"column":15}},{"source":"../../../../src/internal/operators/reduce.ts","name":null,"original":{"line":60,"column":29},"generated":{"line":12,"column":16}},{"source":"../../../../src/internal/operators/reduce.ts","name":null,"original":{"line":60,"column":6},"generated":{"line":12,"column":27}},{"source":"../../../../src/internal/operators/reduce.ts","name":null,"original":{"line":60,"column":86},"generated":{"line":12,"column":29}},{"source":"../../../../src/internal/operators/reduce.ts","name":null,"original":{"line":60,"column":6},"generated":{"line":12,"column":33}},{"source":"../../../../src/internal/operators/reduce.ts","name":null,"original":{"line":60,"column":96},"generated":{"line":12,"column":35}},{"source":"../../../../src/internal/operators/reduce.ts","name":null,"original":{"line":61,"column":2},"generated":{"line":13,"column":2}},{"source":"../../../../src/internal/operators/reduce.ts","name":null,"original":{"line":61,"column":9},"generated":{"line":13,"column":9}},{"source":"../../../../src/internal/operators/reduce.ts","name":null,"original":{"line":61,"column":9},"generated":{"line":13,"column":13}},{"source":"../../../../src/internal/operators/reduce.ts","name":null,"original":{"line":61,"column":9},"generated":{"line":13,"column":26}},{"source":"../../../../src/internal/operators/reduce.ts","name":null,"original":{"line":61,"column":17},"generated":{"line":13,"column":28}},{"source":"../../../../src/internal/operators/reduce.ts","name":null,"original":{"line":61,"column":17},"generated":{"line":13,"column":32}},{"source":"../../../../src/internal/operators/reduce.ts","name":null,"original":{"line":61,"column":17},"generated":{"line":13,"column":60}},{"source":"../../../../src/internal/operators/reduce.ts","name":null,"original":{"line":61,"column":31},"generated":{"line":13,"column":62}},{"source":"../../../../src/internal/operators/reduce.ts","name":null,"original":{"line":61,"column":17},"generated":{"line":13,"column":73}},{"source":"../../../../src/internal/operators/reduce.ts","name":null,"original":{"line":61,"column":44},"generated":{"line":13,"column":75}},{"source":"../../../../src/internal/operators/reduce.ts","name":null,"original":{"line":61,"column":17},"generated":{"line":13,"column":79}},{"source":"../../../../src/internal/operators/reduce.ts","name":null,"original":{"line":61,"column":50},"generated":{"line":13,"column":81}},{"source":"../../../../src/internal/operators/reduce.ts","name":null,"original":{"line":61,"column":59},"generated":{"line":13,"column":90}},{"source":"../../../../src/internal/operators/reduce.ts","name":null,"original":{"line":61,"column":60},"generated":{"line":13,"column":91}},{"source":"../../../../src/internal/operators/reduce.ts","name":null,"original":{"line":61,"column":50},"generated":{"line":13,"column":97}},{"source":"../../../../src/internal/operators/reduce.ts","name":null,"original":{"line":61,"column":70},"generated":{"line":13,"column":101}},{"source":"../../../../src/internal/operators/reduce.ts","name":null,"original":{"line":61,"column":17},"generated":{"line":13,"column":102}},{"source":"../../../../src/internal/operators/reduce.ts","name":null,"original":{"line":61,"column":73},"generated":{"line":13,"column":104}},{"source":"../../../../src/internal/operators/reduce.ts","name":null,"original":{"line":61,"column":17},"generated":{"line":13,"column":109}},{"source":"../../../../src/internal/operators/reduce.ts","name":null,"original":{"line":61,"column":80},"generated":{"line":13,"column":111}},{"source":"../../../../src/internal/operators/reduce.ts","name":null,"original":{"line":61,"column":17},"generated":{"line":13,"column":115}},{"source":"../../../../src/internal/operators/reduce.ts","name":null,"original":{"line":61,"column":9},"generated":{"line":13,"column":116}},{"source":"../../../../src/internal/operators/reduce.ts","name":null,"original":{"line":61,"column":2},"generated":{"line":13,"column":117}},{"source":"../../../../src/internal/operators/reduce.ts","name":null,"original":{"line":62,"column":1},"generated":{"line":14,"column":0}}],"sources":{"../../../../src/internal/operators/reduce.ts":"import { scanInternals } from './scanInternals';\nimport { OperatorFunction } from '../types';\nimport { operate } from '../util/lift';\n\nexport function reduce<V, A = V>(accumulator: (acc: A | V, value: V, index: number) => A): OperatorFunction<V, V | A>;\nexport function reduce<V, A>(accumulator: (acc: A, value: V, index: number) => A, seed: A): OperatorFunction<V, A>;\nexport function reduce<V, A, S = A>(accumulator: (acc: A | S, value: V, index: number) => A, seed: S): OperatorFunction<V, A>;\n\n/**\n * Applies an accumulator function over the source Observable, and returns the\n * accumulated result when the source completes, given an optional seed value.\n *\n * <span class=\"informal\">Combines together all values emitted on the source,\n * using an accumulator function that knows how to join a new source value into\n * the accumulation from the past.</span>\n *\n * ![](reduce.png)\n *\n * Like\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\n * `reduce` applies an `accumulator` function against an accumulation and each\n * value of the source Observable (from the past) to reduce it to a single\n * value, emitted on the output Observable. Note that `reduce` will only emit\n * one value, only when the source Observable completes. It is equivalent to\n * applying operator {@link scan} followed by operator {@link last}.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * ## Example\n *\n * Count the number of click events that happened in 5 seconds\n *\n * ```ts\n * import { fromEvent, takeUntil, interval, map, reduce } from 'rxjs';\n *\n * const clicksInFiveSeconds = fromEvent(document, 'click')\n *   .pipe(takeUntil(interval(5000)));\n *\n * const ones = clicksInFiveSeconds.pipe(map(() => 1));\n * const seed = 0;\n * const count = ones.pipe(reduce((acc, one) => acc + one, seed));\n *\n * count.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link count}\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link scan}\n *\n * @param {function(acc: A, value: V, index: number): A} accumulator The accumulator function\n * called on each source value.\n * @param {A} [seed] The initial accumulation value.\n * @return A function that returns an Observable that emits a single value that\n * is the result of accumulating the values emitted by the source Observable.\n */\nexport function reduce<V, A>(accumulator: (acc: V | A, value: V, index: number) => A, seed?: any): OperatorFunction<V, V | A> {\n  return operate(scanInternals(accumulator, seed, arguments.length >= 2, false, true));\n}\n"},"lineCount":null}},"error":null,"hash":"f542315a374b6ce441adf54d1d7ea8ab","cacheData":{"env":{}}}