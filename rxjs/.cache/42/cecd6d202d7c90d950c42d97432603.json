{"id":"../node_modules/rxjs/dist/esm5/internal/operators/mergeAll.js","dependencies":[{"name":"C:\\Appleseeds\\angular-project\\Clips\\rxjs\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\mergeAll.js.map","includedInParent":true,"mtime":1647189212438},{"name":"C:\\Appleseeds\\angular-project\\Clips\\rxjs\\node_modules\\rxjs\\src\\internal\\operators\\mergeAll.ts","includedInParent":true,"mtime":1647189212438},{"name":"C:\\Appleseeds\\angular-project\\Clips\\rxjs\\package.json","includedInParent":true,"mtime":1625261731954},{"name":"C:\\Appleseeds\\angular-project\\Clips\\.browserslistrc","includedInParent":true,"mtime":1655288118437},{"name":"C:\\Appleseeds\\angular-project\\Clips\\rxjs\\node_modules\\rxjs\\package.json","includedInParent":true,"mtime":1647189212438},{"name":"./mergeMap","loc":{"line":1,"column":25,"index":25},"parent":"C:\\Appleseeds\\angular-project\\Clips\\rxjs\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\mergeAll.js","resolved":"C:\\Appleseeds\\angular-project\\Clips\\rxjs\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\mergeMap.js"},{"name":"../util/identity","loc":{"line":2,"column":25,"index":64},"parent":"C:\\Appleseeds\\angular-project\\Clips\\rxjs\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\mergeAll.js","resolved":"C:\\Appleseeds\\angular-project\\Clips\\rxjs\\node_modules\\rxjs\\dist\\esm5\\internal\\util\\identity.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.mergeAll = mergeAll;\n\nvar _mergeMap = require(\"./mergeMap\");\n\nvar _identity = require(\"../util/identity\");\n\nfunction mergeAll(concurrent) {\n  if (concurrent === void 0) {\n    concurrent = Infinity;\n  }\n\n  return (0, _mergeMap.mergeMap)(_identity.identity, concurrent);\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":64,"column":6},"generated":{"line":12,"column":0}},{"source":"../../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":64,"column":16},"generated":{"line":12,"column":9}},{"source":"../../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":64,"column":6},"generated":{"line":12,"column":17}},{"source":"../../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":64,"column":57},"generated":{"line":12,"column":18}},{"source":"../../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":64,"column":6},"generated":{"line":12,"column":28}},{"source":"../../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":64,"column":86},"generated":{"line":12,"column":30}},{"source":"../../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":64,"column":57},"generated":{"line":13,"column":2}},{"source":"../../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":64,"column":57},"generated":{"line":13,"column":6}},{"source":"../../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":64,"column":57},"generated":{"line":13,"column":16}},{"source":"../../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":64,"column":57},"generated":{"line":13,"column":21}},{"source":"../../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":64,"column":57},"generated":{"line":13,"column":26}},{"source":"../../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":64,"column":57},"generated":{"line":13,"column":27}},{"source":"../../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":64,"column":57},"generated":{"line":13,"column":29}},{"source":"../../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":64,"column":57},"generated":{"line":14,"column":4}},{"source":"../../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":64,"column":57},"generated":{"line":14,"column":14}},{"source":"../../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":64,"column":57},"generated":{"line":14,"column":17}},{"source":"../../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":64,"column":57},"generated":{"line":14,"column":25}},{"source":"../../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":64,"column":86},"generated":{"line":15,"column":2}},{"source":"../../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":65,"column":2},"generated":{"line":17,"column":2}},{"source":"../../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":65,"column":9},"generated":{"line":17,"column":9}},{"source":"../../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":65,"column":9},"generated":{"line":17,"column":13}},{"source":"../../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":65,"column":9},"generated":{"line":17,"column":31}},{"source":"../../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":65,"column":18},"generated":{"line":17,"column":33}},{"source":"../../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":65,"column":9},"generated":{"line":17,"column":51}},{"source":"../../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":65,"column":28},"generated":{"line":17,"column":53}},{"source":"../../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":65,"column":9},"generated":{"line":17,"column":63}},{"source":"../../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":65,"column":2},"generated":{"line":17,"column":64}},{"source":"../../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":66,"column":1},"generated":{"line":18,"column":0}}],"sources":{"../../../../src/internal/operators/mergeAll.ts":"import { mergeMap } from './mergeMap';\nimport { identity } from '../util/identity';\nimport { OperatorFunction, ObservableInput, ObservedValueOf } from '../types';\n\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * ![](mergeAll.png)\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * ## Examples\n *\n * Spawn a new interval Observable for each click event, and blend their outputs as one Observable\n *\n * ```ts\n * import { fromEvent, map, interval, mergeAll } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const higherOrder = clicks.pipe(map(() => interval(1000)));\n * const firstOrder = higherOrder.pipe(mergeAll());\n *\n * firstOrder.subscribe(x => console.log(x));\n * ```\n *\n * Count from 0 to 9 every second for each click, but only allow 2 concurrent timers\n *\n * ```ts\n * import { fromEvent, map, interval, take, mergeAll } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const higherOrder = clicks.pipe(\n *   map(() => interval(1000).pipe(take(10)))\n * );\n * const firstOrder = higherOrder.pipe(mergeAll(2));\n *\n * firstOrder.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link combineLatestAll}\n * @see {@link concatAll}\n * @see {@link exhaustAll}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchAll}\n * @see {@link switchMap}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Infinity] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return A function that returns an Observable that emits values coming from\n * all the inner Observables emitted by the source Observable.\n */\nexport function mergeAll<O extends ObservableInput<any>>(concurrent: number = Infinity): OperatorFunction<O, ObservedValueOf<O>> {\n  return mergeMap(identity, concurrent);\n}\n"},"lineCount":null}},"error":null,"hash":"2b628d015ac89237cced9023cc5c6060","cacheData":{"env":{}}}