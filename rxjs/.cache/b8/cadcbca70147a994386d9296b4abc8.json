{"id":"../node_modules/rxjs/dist/esm5/internal/operators/concatMapTo.js","dependencies":[{"name":"C:\\Appleseeds\\angular-project\\rxjs\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\concatMapTo.js.map","includedInParent":true,"mtime":1647189212438},{"name":"C:\\Appleseeds\\angular-project\\rxjs\\node_modules\\rxjs\\src\\internal\\operators\\concatMapTo.ts","includedInParent":true,"mtime":1647189212438},{"name":"C:\\Appleseeds\\angular-project\\rxjs\\package.json","includedInParent":true,"mtime":1625261731954},{"name":"C:\\Appleseeds\\angular-project\\rxjs\\node_modules\\rxjs\\package.json","includedInParent":true,"mtime":1647189212438},{"name":"./concatMap","loc":{"line":1,"column":26,"index":26},"parent":"C:\\Appleseeds\\angular-project\\rxjs\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\concatMapTo.js","resolved":"C:\\Appleseeds\\angular-project\\rxjs\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\concatMap.js"},{"name":"../util/isFunction","loc":{"line":2,"column":27,"index":68},"parent":"C:\\Appleseeds\\angular-project\\rxjs\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\concatMapTo.js","resolved":"C:\\Appleseeds\\angular-project\\rxjs\\node_modules\\rxjs\\dist\\esm5\\internal\\util\\isFunction.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.concatMapTo = concatMapTo;\n\nvar _concatMap = require(\"./concatMap\");\n\nvar _isFunction = require(\"../util/isFunction\");\n\nfunction concatMapTo(innerObservable, resultSelector) {\n  return (0, _isFunction.isFunction)(resultSelector) ? (0, _concatMap.concatMap)(function () {\n    return innerObservable;\n  }, resultSelector) : (0, _concatMap.concatMap)(function () {\n    return innerObservable;\n  });\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../../src/internal/operators/concatMapTo.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../../src/internal/operators/concatMapTo.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../../src/internal/operators/concatMapTo.ts","name":null,"original":{"line":74,"column":6},"generated":{"line":12,"column":0}},{"source":"../../../../src/internal/operators/concatMapTo.ts","name":null,"original":{"line":74,"column":16},"generated":{"line":12,"column":9}},{"source":"../../../../src/internal/operators/concatMapTo.ts","name":null,"original":{"line":74,"column":6},"generated":{"line":12,"column":20}},{"source":"../../../../src/internal/operators/concatMapTo.ts","name":null,"original":{"line":75,"column":2},"generated":{"line":12,"column":21}},{"source":"../../../../src/internal/operators/concatMapTo.ts","name":null,"original":{"line":74,"column":6},"generated":{"line":12,"column":36}},{"source":"../../../../src/internal/operators/concatMapTo.ts","name":null,"original":{"line":76,"column":2},"generated":{"line":12,"column":38}},{"source":"../../../../src/internal/operators/concatMapTo.ts","name":null,"original":{"line":74,"column":6},"generated":{"line":12,"column":52}},{"source":"../../../../src/internal/operators/concatMapTo.ts","name":null,"original":{"line":76,"column":111},"generated":{"line":12,"column":54}},{"source":"../../../../src/internal/operators/concatMapTo.ts","name":null,"original":{"line":78,"column":2},"generated":{"line":13,"column":2}},{"source":"../../../../src/internal/operators/concatMapTo.ts","name":null,"original":{"line":78,"column":9},"generated":{"line":13,"column":9}},{"source":"../../../../src/internal/operators/concatMapTo.ts","name":null,"original":{"line":78,"column":9},"generated":{"line":13,"column":13}},{"source":"../../../../src/internal/operators/concatMapTo.ts","name":null,"original":{"line":78,"column":9},"generated":{"line":13,"column":35}},{"source":"../../../../src/internal/operators/concatMapTo.ts","name":null,"original":{"line":78,"column":20},"generated":{"line":13,"column":37}},{"source":"../../../../src/internal/operators/concatMapTo.ts","name":null,"original":{"line":78,"column":9},"generated":{"line":13,"column":51}},{"source":"../../../../src/internal/operators/concatMapTo.ts","name":null,"original":{"line":78,"column":38},"generated":{"line":13,"column":55}},{"source":"../../../../src/internal/operators/concatMapTo.ts","name":null,"original":{"line":78,"column":38},"generated":{"line":13,"column":59}},{"source":"../../../../src/internal/operators/concatMapTo.ts","name":null,"original":{"line":78,"column":38},"generated":{"line":13,"column":79}},{"source":"../../../../src/internal/operators/concatMapTo.ts","name":null,"original":{"line":78,"column":48},"generated":{"line":13,"column":81}},{"source":"../../../../src/internal/operators/concatMapTo.ts","name":null,"original":{"line":78,"column":48},"generated":{"line":13,"column":93}},{"source":"../../../../src/internal/operators/concatMapTo.ts","name":null,"original":{"line":78,"column":54},"generated":{"line":14,"column":4}},{"source":"../../../../src/internal/operators/concatMapTo.ts","name":null,"original":{"line":78,"column":54},"generated":{"line":14,"column":11}},{"source":"../../../../src/internal/operators/concatMapTo.ts","name":null,"original":{"line":78,"column":54},"generated":{"line":14,"column":26}},{"source":"../../../../src/internal/operators/concatMapTo.ts","name":null,"original":{"line":78,"column":69},"generated":{"line":15,"column":2}},{"source":"../../../../src/internal/operators/concatMapTo.ts","name":null,"original":{"line":78,"column":38},"generated":{"line":15,"column":3}},{"source":"../../../../src/internal/operators/concatMapTo.ts","name":null,"original":{"line":78,"column":71},"generated":{"line":15,"column":5}},{"source":"../../../../src/internal/operators/concatMapTo.ts","name":null,"original":{"line":78,"column":38},"generated":{"line":15,"column":19}},{"source":"../../../../src/internal/operators/concatMapTo.ts","name":null,"original":{"line":78,"column":9},"generated":{"line":15,"column":20}},{"source":"../../../../src/internal/operators/concatMapTo.ts","name":null,"original":{"line":78,"column":89},"generated":{"line":15,"column":23}},{"source":"../../../../src/internal/operators/concatMapTo.ts","name":null,"original":{"line":78,"column":89},"generated":{"line":15,"column":27}},{"source":"../../../../src/internal/operators/concatMapTo.ts","name":null,"original":{"line":78,"column":89},"generated":{"line":15,"column":47}},{"source":"../../../../src/internal/operators/concatMapTo.ts","name":null,"original":{"line":78,"column":99},"generated":{"line":15,"column":49}},{"source":"../../../../src/internal/operators/concatMapTo.ts","name":null,"original":{"line":78,"column":99},"generated":{"line":15,"column":61}},{"source":"../../../../src/internal/operators/concatMapTo.ts","name":null,"original":{"line":78,"column":105},"generated":{"line":16,"column":4}},{"source":"../../../../src/internal/operators/concatMapTo.ts","name":null,"original":{"line":78,"column":105},"generated":{"line":16,"column":11}},{"source":"../../../../src/internal/operators/concatMapTo.ts","name":null,"original":{"line":78,"column":105},"generated":{"line":16,"column":26}},{"source":"../../../../src/internal/operators/concatMapTo.ts","name":null,"original":{"line":78,"column":120},"generated":{"line":17,"column":2}},{"source":"../../../../src/internal/operators/concatMapTo.ts","name":null,"original":{"line":78,"column":89},"generated":{"line":17,"column":3}},{"source":"../../../../src/internal/operators/concatMapTo.ts","name":null,"original":{"line":78,"column":2},"generated":{"line":17,"column":4}},{"source":"../../../../src/internal/operators/concatMapTo.ts","name":null,"original":{"line":79,"column":1},"generated":{"line":18,"column":0}}],"sources":{"../../../../src/internal/operators/concatMapTo.ts":"import { concatMap } from './concatMap';\nimport { ObservableInput, OperatorFunction, ObservedValueOf } from '../types';\nimport { isFunction } from '../util/isFunction';\n\n/** @deprecated Will be removed in v9. Use {@link concatMap} instead: `concatMap(() => result)` */\nexport function concatMapTo<O extends ObservableInput<unknown>>(observable: O): OperatorFunction<unknown, ObservedValueOf<O>>;\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\nexport function concatMapTo<O extends ObservableInput<unknown>>(\n  observable: O,\n  resultSelector: undefined\n): OperatorFunction<unknown, ObservedValueOf<O>>;\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\nexport function concatMapTo<T, R, O extends ObservableInput<unknown>>(\n  observable: O,\n  resultSelector: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, R>;\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in a serialized fashion on the output Observable.\n *\n * <span class=\"informal\">It's like {@link concatMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * ![](concatMapTo.png)\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. Each new `innerObservable`\n * instance emitted on the output Observable is concatenated with the previous\n * `innerObservable` instance.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMapTo` is equivalent to `mergeMapTo` with concurrency parameter\n * set to `1`.\n *\n * ## Example\n *\n * For each click event, tick every second from 0 to 3, with no concurrency\n *\n * ```ts\n * import { fromEvent, concatMapTo, interval, take } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(\n *   concatMapTo(interval(1000).pipe(take(4)))\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n * ```\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link mergeMapTo}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @return A function that returns an Observable of values merged together by\n * joining the passed Observable with itself, one after the other, for each\n * value emitted from the source.\n * @deprecated Will be removed in v9. Use {@link concatMap} instead: `concatMap(() => result)`\n */\nexport function concatMapTo<T, R, O extends ObservableInput<unknown>>(\n  innerObservable: O,\n  resultSelector?: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, ObservedValueOf<O> | R> {\n  return isFunction(resultSelector) ? concatMap(() => innerObservable, resultSelector) : concatMap(() => innerObservable);\n}\n"},"lineCount":null}},"error":null,"hash":"070217b0779ab651de544efdaa0bda41","cacheData":{"env":{}}}