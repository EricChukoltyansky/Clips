{"id":"../node_modules/rxjs/dist/esm5/internal/operators/publishLast.js","dependencies":[{"name":"C:\\Appleseeds\\angular-project\\rxjs\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\publishLast.js.map","includedInParent":true,"mtime":1647189212438},{"name":"C:\\Appleseeds\\angular-project\\rxjs\\node_modules\\rxjs\\src\\internal\\operators\\publishLast.ts","includedInParent":true,"mtime":1647189212438},{"name":"C:\\Appleseeds\\angular-project\\rxjs\\package.json","includedInParent":true,"mtime":1625261731954},{"name":"C:\\Appleseeds\\angular-project\\rxjs\\node_modules\\rxjs\\package.json","includedInParent":true,"mtime":1647189212438},{"name":"../AsyncSubject","loc":{"line":1,"column":29,"index":29},"parent":"C:\\Appleseeds\\angular-project\\rxjs\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\publishLast.js","resolved":"C:\\Appleseeds\\angular-project\\rxjs\\node_modules\\rxjs\\dist\\esm5\\internal\\AsyncSubject.js"},{"name":"../observable/ConnectableObservable","loc":{"line":2,"column":38,"index":86},"parent":"C:\\Appleseeds\\angular-project\\rxjs\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\publishLast.js","resolved":"C:\\Appleseeds\\angular-project\\rxjs\\node_modules\\rxjs\\dist\\esm5\\internal\\observable\\ConnectableObservable.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.publishLast = publishLast;\n\nvar _AsyncSubject = require(\"../AsyncSubject\");\n\nvar _ConnectableObservable = require(\"../observable/ConnectableObservable\");\n\nfunction publishLast() {\n  return function (source) {\n    var subject = new _AsyncSubject.AsyncSubject();\n    return new _ConnectableObservable.ConnectableObservable(source, function () {\n      return subject;\n    });\n  };\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../../src/internal/operators/publishLast.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../../src/internal/operators/publishLast.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../../src/internal/operators/publishLast.ts","name":null,"original":{"line":70,"column":6},"generated":{"line":12,"column":0}},{"source":"../../../../src/internal/operators/publishLast.ts","name":null,"original":{"line":70,"column":16},"generated":{"line":12,"column":9}},{"source":"../../../../src/internal/operators/publishLast.ts","name":null,"original":{"line":70,"column":6},"generated":{"line":12,"column":20}},{"source":"../../../../src/internal/operators/publishLast.ts","name":null,"original":{"line":70,"column":27},"generated":{"line":12,"column":23}},{"source":"../../../../src/internal/operators/publishLast.ts","name":null,"original":{"line":72,"column":2},"generated":{"line":13,"column":2}},{"source":"../../../../src/internal/operators/publishLast.ts","name":null,"original":{"line":72,"column":9},"generated":{"line":13,"column":9}},{"source":"../../../../src/internal/operators/publishLast.ts","name":null,"original":{"line":72,"column":10},"generated":{"line":13,"column":19}},{"source":"../../../../src/internal/operators/publishLast.ts","name":null,"original":{"line":72,"column":9},"generated":{"line":13,"column":25}},{"source":"../../../../src/internal/operators/publishLast.ts","name":null,"original":{"line":72,"column":16},"generated":{"line":13,"column":27}},{"source":"../../../../src/internal/operators/publishLast.ts","name":null,"original":{"line":73,"column":4},"generated":{"line":14,"column":4}},{"source":"../../../../src/internal/operators/publishLast.ts","name":null,"original":{"line":73,"column":10},"generated":{"line":14,"column":8}},{"source":"../../../../src/internal/operators/publishLast.ts","name":null,"original":{"line":73,"column":17},"generated":{"line":14,"column":15}},{"source":"../../../../src/internal/operators/publishLast.ts","name":null,"original":{"line":73,"column":20},"generated":{"line":14,"column":18}},{"source":"../../../../src/internal/operators/publishLast.ts","name":null,"original":{"line":73,"column":24},"generated":{"line":14,"column":22}},{"source":"../../../../src/internal/operators/publishLast.ts","name":null,"original":{"line":73,"column":20},"generated":{"line":14,"column":48}},{"source":"../../../../src/internal/operators/publishLast.ts","name":null,"original":{"line":73,"column":4},"generated":{"line":14,"column":50}},{"source":"../../../../src/internal/operators/publishLast.ts","name":null,"original":{"line":74,"column":4},"generated":{"line":15,"column":4}},{"source":"../../../../src/internal/operators/publishLast.ts","name":null,"original":{"line":74,"column":11},"generated":{"line":15,"column":11}},{"source":"../../../../src/internal/operators/publishLast.ts","name":null,"original":{"line":74,"column":15},"generated":{"line":15,"column":15}},{"source":"../../../../src/internal/operators/publishLast.ts","name":null,"original":{"line":74,"column":11},"generated":{"line":15,"column":59}},{"source":"../../../../src/internal/operators/publishLast.ts","name":null,"original":{"line":74,"column":37},"generated":{"line":15,"column":60}},{"source":"../../../../src/internal/operators/publishLast.ts","name":null,"original":{"line":74,"column":11},"generated":{"line":15,"column":66}},{"source":"../../../../src/internal/operators/publishLast.ts","name":null,"original":{"line":74,"column":45},"generated":{"line":15,"column":68}},{"source":"../../../../src/internal/operators/publishLast.ts","name":null,"original":{"line":74,"column":45},"generated":{"line":15,"column":80}},{"source":"../../../../src/internal/operators/publishLast.ts","name":null,"original":{"line":74,"column":51},"generated":{"line":16,"column":6}},{"source":"../../../../src/internal/operators/publishLast.ts","name":null,"original":{"line":74,"column":51},"generated":{"line":16,"column":13}},{"source":"../../../../src/internal/operators/publishLast.ts","name":null,"original":{"line":74,"column":51},"generated":{"line":16,"column":20}},{"source":"../../../../src/internal/operators/publishLast.ts","name":null,"original":{"line":74,"column":58},"generated":{"line":17,"column":4}},{"source":"../../../../src/internal/operators/publishLast.ts","name":null,"original":{"line":74,"column":11},"generated":{"line":17,"column":5}},{"source":"../../../../src/internal/operators/publishLast.ts","name":null,"original":{"line":74,"column":4},"generated":{"line":17,"column":6}},{"source":"../../../../src/internal/operators/publishLast.ts","name":null,"original":{"line":75,"column":3},"generated":{"line":18,"column":2}},{"source":"../../../../src/internal/operators/publishLast.ts","name":null,"original":{"line":72,"column":2},"generated":{"line":18,"column":3}},{"source":"../../../../src/internal/operators/publishLast.ts","name":null,"original":{"line":76,"column":1},"generated":{"line":19,"column":0}}],"sources":{"../../../../src/internal/operators/publishLast.ts":"import { Observable } from '../Observable';\nimport { AsyncSubject } from '../AsyncSubject';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { UnaryFunction } from '../types';\n\n/**\n * Returns a connectable observable sequence that shares a single subscription to the\n * underlying sequence containing only the last notification.\n *\n * ![](publishLast.png)\n *\n * Similar to {@link publish}, but it waits until the source observable completes and stores\n * the last emitted value.\n * Similarly to {@link publishReplay} and {@link publishBehavior}, this keeps storing the last\n * value even if it has no more subscribers. If subsequent subscriptions happen, they will\n * immediately get that last stored value and complete.\n *\n * ## Example\n *\n * ```ts\n * import { ConnectableObservable, interval, publishLast, tap, take } from 'rxjs';\n *\n * const connectable = <ConnectableObservable<number>>interval(1000)\n *   .pipe(\n *     tap(x => console.log('side effect', x)),\n *     take(3),\n *     publishLast()\n *   );\n *\n * connectable.subscribe({\n *   next: x => console.log('Sub. A', x),\n *   error: err => console.log('Sub. A Error', err),\n *   complete: () => console.log('Sub. A Complete')\n * });\n *\n * connectable.subscribe({\n *   next: x => console.log('Sub. B', x),\n *   error: err => console.log('Sub. B Error', err),\n *   complete: () => console.log('Sub. B Complete')\n * });\n *\n * connectable.connect();\n *\n * // Results:\n * // 'side effect 0'   - after one second\n * // 'side effect 1'   - after two seconds\n * // 'side effect 2'   - after three seconds\n * // 'Sub. A 2'        - immediately after 'side effect 2'\n * // 'Sub. B 2'\n * // 'Sub. A Complete'\n * // 'Sub. B Complete'\n * ```\n *\n * @see {@link ConnectableObservable}\n * @see {@link publish}\n * @see {@link publishReplay}\n * @see {@link publishBehavior}\n *\n * @return A function that returns an Observable that emits elements of a\n * sequence produced by multicasting the source sequence.\n * @deprecated Will be removed in v8. To create a connectable observable with an\n * {@link AsyncSubject} under the hood, use {@link connectable}.\n * `source.pipe(publishLast())` is equivalent to\n * `connectable(source, { connector: () => new AsyncSubject(), resetOnDisconnect: false })`.\n * If you're using {@link refCount} after `publishLast`, use the {@link share} operator instead.\n * `source.pipe(publishLast(), refCount())` is equivalent to\n * `source.pipe(share({ connector: () => new AsyncSubject(), resetOnError: false, resetOnComplete: false, resetOnRefCountZero: false }))`.\n * Details: https://rxjs.dev/deprecations/multicasting\n */\nexport function publishLast<T>(): UnaryFunction<Observable<T>, ConnectableObservable<T>> {\n  // Note that this has *never* supported a selector function like `publish` and `publishReplay`.\n  return (source) => {\n    const subject = new AsyncSubject<T>();\n    return new ConnectableObservable(source, () => subject);\n  };\n}\n"},"lineCount":null}},"error":null,"hash":"f02e0e1c6c91594b4c75709f96f39a5d","cacheData":{"env":{}}}