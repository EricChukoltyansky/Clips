{"id":"../node_modules/rxjs/dist/esm5/internal/operators/mergeScan.js","dependencies":[{"name":"C:\\Appleseeds\\angular-project\\Clips\\rxjs\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\mergeScan.js.map","includedInParent":true,"mtime":1647189212438},{"name":"C:\\Appleseeds\\angular-project\\Clips\\rxjs\\node_modules\\rxjs\\src\\internal\\operators\\mergeScan.ts","includedInParent":true,"mtime":1647189212438},{"name":"C:\\Appleseeds\\angular-project\\Clips\\rxjs\\package.json","includedInParent":true,"mtime":1657193624370},{"name":"C:\\Appleseeds\\angular-project\\Clips\\.browserslistrc","includedInParent":true,"mtime":1655288118437},{"name":"C:\\Appleseeds\\angular-project\\Clips\\rxjs\\node_modules\\rxjs\\package.json","includedInParent":true,"mtime":1647189212438},{"name":"../util/lift","loc":{"line":1,"column":24,"index":24},"parent":"C:\\Appleseeds\\angular-project\\Clips\\rxjs\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\mergeScan.js","resolved":"C:\\Appleseeds\\angular-project\\Clips\\rxjs\\node_modules\\rxjs\\dist\\esm5\\internal\\util\\lift.js"},{"name":"./mergeInternals","loc":{"line":2,"column":31,"index":71},"parent":"C:\\Appleseeds\\angular-project\\Clips\\rxjs\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\mergeScan.js","resolved":"C:\\Appleseeds\\angular-project\\Clips\\rxjs\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\mergeInternals.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.mergeScan = mergeScan;\n\nvar _lift = require(\"../util/lift\");\n\nvar _mergeInternals = require(\"./mergeInternals\");\n\nfunction mergeScan(accumulator, seed, concurrent) {\n  if (concurrent === void 0) {\n    concurrent = Infinity;\n  }\n\n  return (0, _lift.operate)(function (source, subscriber) {\n    var state = seed;\n    return (0, _mergeInternals.mergeInternals)(source, subscriber, function (value, index) {\n      return accumulator(state, value, index);\n    }, concurrent, function (value) {\n      state = value;\n    }, false, undefined, function () {\n      return state = null;\n    });\n  });\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":71,"column":6},"generated":{"line":12,"column":0}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":71,"column":16},"generated":{"line":12,"column":9}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":71,"column":6},"generated":{"line":12,"column":18}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":72,"column":2},"generated":{"line":12,"column":19}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":71,"column":6},"generated":{"line":12,"column":30}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":73,"column":2},"generated":{"line":12,"column":32}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":71,"column":6},"generated":{"line":12,"column":36}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":74,"column":2},"generated":{"line":12,"column":38}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":71,"column":6},"generated":{"line":12,"column":48}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":74,"column":23},"generated":{"line":12,"column":50}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":74,"column":2},"generated":{"line":13,"column":2}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":74,"column":2},"generated":{"line":13,"column":6}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":74,"column":2},"generated":{"line":13,"column":16}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":74,"column":2},"generated":{"line":13,"column":21}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":74,"column":2},"generated":{"line":13,"column":26}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":74,"column":2},"generated":{"line":13,"column":27}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":74,"column":2},"generated":{"line":13,"column":29}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":74,"column":2},"generated":{"line":14,"column":4}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":74,"column":2},"generated":{"line":14,"column":14}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":74,"column":2},"generated":{"line":14,"column":17}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":74,"column":2},"generated":{"line":14,"column":25}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":74,"column":23},"generated":{"line":15,"column":2}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":76,"column":2},"generated":{"line":17,"column":2}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":76,"column":9},"generated":{"line":17,"column":9}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":76,"column":9},"generated":{"line":17,"column":13}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":76,"column":9},"generated":{"line":17,"column":26}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":76,"column":17},"generated":{"line":17,"column":28}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":76,"column":18},"generated":{"line":17,"column":38}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":76,"column":17},"generated":{"line":17,"column":44}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":76,"column":26},"generated":{"line":17,"column":46}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":76,"column":17},"generated":{"line":17,"column":56}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":76,"column":36},"generated":{"line":17,"column":58}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":78,"column":4},"generated":{"line":18,"column":4}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":78,"column":8},"generated":{"line":18,"column":8}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":78,"column":13},"generated":{"line":18,"column":13}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":78,"column":16},"generated":{"line":18,"column":16}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":78,"column":4},"generated":{"line":18,"column":20}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":80,"column":4},"generated":{"line":19,"column":4}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":80,"column":11},"generated":{"line":19,"column":11}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":80,"column":11},"generated":{"line":19,"column":15}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":80,"column":11},"generated":{"line":19,"column":45}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":81,"column":6},"generated":{"line":19,"column":47}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":80,"column":11},"generated":{"line":19,"column":53}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":82,"column":6},"generated":{"line":19,"column":55}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":80,"column":11},"generated":{"line":19,"column":65}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":83,"column":6},"generated":{"line":19,"column":67}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":83,"column":7},"generated":{"line":19,"column":77}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":83,"column":6},"generated":{"line":19,"column":82}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":83,"column":14},"generated":{"line":19,"column":84}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":83,"column":6},"generated":{"line":19,"column":89}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":83,"column":19},"generated":{"line":19,"column":91}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":83,"column":24},"generated":{"line":20,"column":6}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":83,"column":24},"generated":{"line":20,"column":13}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":83,"column":35},"generated":{"line":20,"column":24}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":83,"column":36},"generated":{"line":20,"column":25}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":83,"column":35},"generated":{"line":20,"column":30}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":83,"column":43},"generated":{"line":20,"column":32}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":83,"column":35},"generated":{"line":20,"column":37}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":83,"column":50},"generated":{"line":20,"column":39}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":83,"column":35},"generated":{"line":20,"column":44}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":83,"column":24},"generated":{"line":20,"column":45}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":83,"column":56},"generated":{"line":21,"column":4}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":80,"column":11},"generated":{"line":21,"column":5}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":84,"column":6},"generated":{"line":21,"column":7}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":80,"column":11},"generated":{"line":21,"column":17}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":85,"column":6},"generated":{"line":21,"column":19}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":85,"column":7},"generated":{"line":21,"column":29}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":85,"column":6},"generated":{"line":21,"column":34}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":85,"column":12},"generated":{"line":21,"column":36}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":86,"column":8},"generated":{"line":22,"column":6}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":86,"column":13},"generated":{"line":22,"column":11}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":86,"column":16},"generated":{"line":22,"column":14}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":86,"column":8},"generated":{"line":22,"column":19}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":87,"column":7},"generated":{"line":23,"column":4}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":80,"column":11},"generated":{"line":23,"column":5}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":88,"column":6},"generated":{"line":23,"column":7}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":80,"column":11},"generated":{"line":23,"column":12}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":89,"column":6},"generated":{"line":23,"column":14}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":80,"column":11},"generated":{"line":23,"column":23}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":90,"column":6},"generated":{"line":23,"column":25}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":90,"column":6},"generated":{"line":23,"column":37}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":90,"column":12},"generated":{"line":24,"column":6}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":90,"column":13},"generated":{"line":24,"column":13}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":90,"column":18},"generated":{"line":24,"column":18}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":90,"column":21},"generated":{"line":24,"column":21}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":90,"column":12},"generated":{"line":24,"column":25}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":90,"column":27},"generated":{"line":25,"column":4}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":80,"column":11},"generated":{"line":25,"column":5}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":80,"column":4},"generated":{"line":25,"column":6}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":92,"column":3},"generated":{"line":26,"column":2}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":76,"column":9},"generated":{"line":26,"column":3}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":76,"column":2},"generated":{"line":26,"column":4}},{"source":"../../../../src/internal/operators/mergeScan.ts","name":null,"original":{"line":93,"column":1},"generated":{"line":27,"column":0}}],"sources":{"../../../../src/internal/operators/mergeScan.ts":"import { ObservableInput, OperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { mergeInternals } from './mergeInternals';\n\n/**\n * Applies an accumulator function over the source Observable where the\n * accumulator function itself returns an Observable, then each intermediate\n * Observable returned is merged into the output Observable.\n *\n * <span class=\"informal\">It's like {@link scan}, but the Observables returned\n * by the accumulator are merged into the outer Observable.</span>\n *\n * The first parameter of the `mergeScan` is an `accumulator` function which is\n * being called every time the source Observable emits a value. `mergeScan` will\n * subscribe to the value returned by the `accumulator` function and will emit\n * values to the subscriber emitted by inner Observable.\n *\n * The `accumulator` function is being called with three parameters passed to it:\n * `acc`, `value` and `index`. The `acc` parameter is used as the state parameter\n * whose value is initially set to the `seed` parameter (the second parameter\n * passed to the `mergeScan` operator).\n *\n * `mergeScan` internally keeps the value of the `acc` parameter: as long as the\n * source Observable emits without inner Observable emitting, the `acc` will be\n * set to `seed`. The next time the inner Observable emits a value, `mergeScan`\n * will internally remember it and it will be passed to the `accumulator`\n * function as `acc` parameter the next time source emits.\n *\n * The `value` parameter of the `accumulator` function is the value emitted by the\n * source Observable, while the `index` is a number which represent the order of the\n * current emission by the source Observable. It starts with 0.\n *\n * The last parameter to the `mergeScan` is the `concurrent` value which defaults\n * to Infinity. It represents the maximum number of inner Observable subscriptions\n * at a time.\n *\n * ## Example\n *\n * Count the number of click events\n *\n * ```ts\n * import { fromEvent, map, mergeScan, of } from 'rxjs';\n *\n * const click$ = fromEvent(document, 'click');\n * const one$ = click$.pipe(map(() => 1));\n * const seed = 0;\n * const count$ = one$.pipe(\n *   mergeScan((acc, one) => of(acc + one), seed)\n * );\n *\n * count$.subscribe(x => console.log(x));\n *\n * // Results:\n * // 1\n * // 2\n * // 3\n * // 4\n * // ...and so on for each click\n * ```\n *\n * @see {@link scan}\n * @see {@link switchScan}\n *\n * @param {function(acc: R, value: T): Observable<R>} accumulator\n * The accumulator function called on each source value.\n * @param seed The initial accumulation value.\n * @param {number} [concurrent=Infinity] Maximum number of\n * input Observables being subscribed to concurrently.\n * @return A function that returns an Observable of the accumulated values.\n */\nexport function mergeScan<T, R>(\n  accumulator: (acc: R, value: T, index: number) => ObservableInput<R>,\n  seed: R,\n  concurrent = Infinity\n): OperatorFunction<T, R> {\n  return operate((source, subscriber) => {\n    // The accumulated state.\n    let state = seed;\n\n    return mergeInternals(\n      source,\n      subscriber,\n      (value, index) => accumulator(state, value, index),\n      concurrent,\n      (value) => {\n        state = value;\n      },\n      false,\n      undefined,\n      () => (state = null!)\n    );\n  });\n}\n"},"lineCount":null}},"error":null,"hash":"57a34c805eaa79609ba71a939d482a60","cacheData":{"env":{}}}