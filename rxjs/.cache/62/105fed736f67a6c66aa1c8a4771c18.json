{"id":"../node_modules/rxjs/dist/esm5/internal/operators/concatMap.js","dependencies":[{"name":"C:\\Appleseeds\\angular-project\\rxjs\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\concatMap.js.map","includedInParent":true,"mtime":1647189212438},{"name":"C:\\Appleseeds\\angular-project\\rxjs\\node_modules\\rxjs\\src\\internal\\operators\\concatMap.ts","includedInParent":true,"mtime":1647189212438},{"name":"C:\\Appleseeds\\angular-project\\rxjs\\package.json","includedInParent":true,"mtime":1625261731954},{"name":"C:\\Appleseeds\\angular-project\\rxjs\\node_modules\\rxjs\\package.json","includedInParent":true,"mtime":1647189212438},{"name":"./mergeMap","loc":{"line":1,"column":25,"index":25},"parent":"C:\\Appleseeds\\angular-project\\rxjs\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\concatMap.js","resolved":"C:\\Appleseeds\\angular-project\\rxjs\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\mergeMap.js"},{"name":"../util/isFunction","loc":{"line":2,"column":27,"index":66},"parent":"C:\\Appleseeds\\angular-project\\rxjs\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\concatMap.js","resolved":"C:\\Appleseeds\\angular-project\\rxjs\\node_modules\\rxjs\\dist\\esm5\\internal\\util\\isFunction.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.concatMap = concatMap;\n\nvar _mergeMap = require(\"./mergeMap\");\n\nvar _isFunction = require(\"../util/isFunction\");\n\nfunction concatMap(project, resultSelector) {\n  return (0, _isFunction.isFunction)(resultSelector) ? (0, _mergeMap.mergeMap)(project, resultSelector, 1) : (0, _mergeMap.mergeMap)(project, 1);\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":79,"column":6},"generated":{"line":12,"column":0}},{"source":"../../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":79,"column":16},"generated":{"line":12,"column":9}},{"source":"../../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":79,"column":6},"generated":{"line":12,"column":18}},{"source":"../../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":80,"column":2},"generated":{"line":12,"column":19}},{"source":"../../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":79,"column":6},"generated":{"line":12,"column":26}},{"source":"../../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":81,"column":2},"generated":{"line":12,"column":28}},{"source":"../../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":79,"column":6},"generated":{"line":12,"column":42}},{"source":"../../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":81,"column":111},"generated":{"line":12,"column":44}},{"source":"../../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":83,"column":2},"generated":{"line":13,"column":2}},{"source":"../../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":83,"column":9},"generated":{"line":13,"column":9}},{"source":"../../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":83,"column":9},"generated":{"line":13,"column":13}},{"source":"../../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":83,"column":9},"generated":{"line":13,"column":35}},{"source":"../../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":83,"column":20},"generated":{"line":13,"column":37}},{"source":"../../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":83,"column":9},"generated":{"line":13,"column":51}},{"source":"../../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":83,"column":38},"generated":{"line":13,"column":55}},{"source":"../../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":83,"column":38},"generated":{"line":13,"column":59}},{"source":"../../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":83,"column":38},"generated":{"line":13,"column":77}},{"source":"../../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":83,"column":47},"generated":{"line":13,"column":79}},{"source":"../../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":83,"column":38},"generated":{"line":13,"column":86}},{"source":"../../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":83,"column":56},"generated":{"line":13,"column":88}},{"source":"../../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":83,"column":38},"generated":{"line":13,"column":102}},{"source":"../../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":83,"column":72},"generated":{"line":13,"column":104}},{"source":"../../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":83,"column":38},"generated":{"line":13,"column":105}},{"source":"../../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":83,"column":9},"generated":{"line":13,"column":106}},{"source":"../../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":83,"column":77},"generated":{"line":13,"column":109}},{"source":"../../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":83,"column":77},"generated":{"line":13,"column":113}},{"source":"../../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":83,"column":77},"generated":{"line":13,"column":131}},{"source":"../../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":83,"column":86},"generated":{"line":13,"column":133}},{"source":"../../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":83,"column":77},"generated":{"line":13,"column":140}},{"source":"../../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":83,"column":95},"generated":{"line":13,"column":142}},{"source":"../../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":83,"column":77},"generated":{"line":13,"column":143}},{"source":"../../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":83,"column":2},"generated":{"line":13,"column":144}},{"source":"../../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":84,"column":1},"generated":{"line":14,"column":0}}],"sources":{"../../../../src/internal/operators/concatMap.ts":"import { mergeMap } from './mergeMap';\nimport { ObservableInput, OperatorFunction, ObservedValueOf } from '../types';\nimport { isFunction } from '../util/isFunction';\n\n/* tslint:disable:max-line-length */\nexport function concatMap<T, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O\n): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\nexport function concatMap<T, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector: undefined\n): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\nexport function concatMap<T, R, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, in a serialized fashion waiting for each one to complete before\n * merging the next.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link concatAll}.</span>\n *\n * ![](concatMap.png)\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\n * concatenated with the previous inner Observable.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\n * to `1`.\n *\n * ## Example\n *\n * For each click event, tick every second from 0 to 3, with no concurrency\n *\n * ```ts\n * import { fromEvent, concatMap, interval, take } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(\n *   concatMap(ev => interval(1000).pipe(take(4)))\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n * ```\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMapTo}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @return A function that returns an Observable that emits the result of\n * applying the projection function (and the optional deprecated\n * `resultSelector`) to each item emitted by the source Observable and taking\n * values from each projected inner Observable sequentially.\n */\nexport function concatMap<T, R, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector?: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, ObservedValueOf<O> | R> {\n  return isFunction(resultSelector) ? mergeMap(project, resultSelector, 1) : mergeMap(project, 1);\n}\n"},"lineCount":null}},"error":null,"hash":"95bfab2c51ac25aaececeb0887b63ad3","cacheData":{"env":{}}}