{"id":"../node_modules/rxjs/dist/esm5/internal/operators/expand.js","dependencies":[{"name":"C:\\Appleseeds\\angular-project\\Clips\\rxjs\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\expand.js.map","includedInParent":true,"mtime":1647189212438},{"name":"C:\\Appleseeds\\angular-project\\Clips\\rxjs\\node_modules\\rxjs\\src\\internal\\operators\\expand.ts","includedInParent":true,"mtime":1647189212438},{"name":"C:\\Appleseeds\\angular-project\\Clips\\rxjs\\package.json","includedInParent":true,"mtime":1625261731954},{"name":"C:\\Appleseeds\\angular-project\\Clips\\.browserslistrc","includedInParent":true,"mtime":1655288118437},{"name":"C:\\Appleseeds\\angular-project\\Clips\\rxjs\\node_modules\\rxjs\\package.json","includedInParent":true,"mtime":1647189212438},{"name":"../util/lift","loc":{"line":1,"column":24,"index":24},"parent":"C:\\Appleseeds\\angular-project\\Clips\\rxjs\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\expand.js","resolved":"C:\\Appleseeds\\angular-project\\Clips\\rxjs\\node_modules\\rxjs\\dist\\esm5\\internal\\util\\lift.js"},{"name":"./mergeInternals","loc":{"line":2,"column":31,"index":71},"parent":"C:\\Appleseeds\\angular-project\\Clips\\rxjs\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\expand.js","resolved":"C:\\Appleseeds\\angular-project\\Clips\\rxjs\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\mergeInternals.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.expand = expand;\n\nvar _lift = require(\"../util/lift\");\n\nvar _mergeInternals = require(\"./mergeInternals\");\n\nfunction expand(project, concurrent, scheduler) {\n  if (concurrent === void 0) {\n    concurrent = Infinity;\n  }\n\n  concurrent = (concurrent || 0) < 1 ? Infinity : concurrent;\n  return (0, _lift.operate)(function (source, subscriber) {\n    return (0, _mergeInternals.mergeInternals)(source, subscriber, project, concurrent, undefined, true, scheduler);\n  });\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":74,"column":6},"generated":{"line":12,"column":0}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":74,"column":16},"generated":{"line":12,"column":9}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":74,"column":6},"generated":{"line":12,"column":15}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":75,"column":2},"generated":{"line":12,"column":16}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":74,"column":6},"generated":{"line":12,"column":23}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":76,"column":2},"generated":{"line":12,"column":25}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":74,"column":6},"generated":{"line":12,"column":35}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":77,"column":2},"generated":{"line":12,"column":37}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":74,"column":6},"generated":{"line":12,"column":46}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":77,"column":27},"generated":{"line":12,"column":48}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":76,"column":2},"generated":{"line":13,"column":2}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":76,"column":2},"generated":{"line":13,"column":6}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":76,"column":2},"generated":{"line":13,"column":16}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":76,"column":2},"generated":{"line":13,"column":21}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":76,"column":2},"generated":{"line":13,"column":26}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":76,"column":2},"generated":{"line":13,"column":27}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":76,"column":2},"generated":{"line":13,"column":29}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":76,"column":2},"generated":{"line":14,"column":4}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":76,"column":2},"generated":{"line":14,"column":14}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":76,"column":2},"generated":{"line":14,"column":17}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":76,"column":2},"generated":{"line":14,"column":25}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":76,"column":23},"generated":{"line":15,"column":2}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":79,"column":2},"generated":{"line":17,"column":2}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":79,"column":12},"generated":{"line":17,"column":12}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":79,"column":15},"generated":{"line":17,"column":15}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":79,"column":16},"generated":{"line":17,"column":16}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":79,"column":26},"generated":{"line":17,"column":26}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":79,"column":30},"generated":{"line":17,"column":30}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":79,"column":15},"generated":{"line":17,"column":31}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":79,"column":35},"generated":{"line":17,"column":35}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":79,"column":15},"generated":{"line":17,"column":36}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":79,"column":39},"generated":{"line":17,"column":39}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":79,"column":15},"generated":{"line":17,"column":47}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":79,"column":50},"generated":{"line":17,"column":50}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":79,"column":2},"generated":{"line":17,"column":60}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":80,"column":2},"generated":{"line":18,"column":2}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":80,"column":9},"generated":{"line":18,"column":9}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":80,"column":9},"generated":{"line":18,"column":13}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":80,"column":9},"generated":{"line":18,"column":26}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":80,"column":17},"generated":{"line":18,"column":28}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":80,"column":18},"generated":{"line":18,"column":38}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":80,"column":17},"generated":{"line":18,"column":44}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":80,"column":26},"generated":{"line":18,"column":46}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":80,"column":17},"generated":{"line":18,"column":56}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":80,"column":36},"generated":{"line":18,"column":58}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":81,"column":4},"generated":{"line":19,"column":4}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":81,"column":4},"generated":{"line":19,"column":11}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":81,"column":4},"generated":{"line":19,"column":15}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":81,"column":4},"generated":{"line":19,"column":45}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":83,"column":6},"generated":{"line":19,"column":47}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":81,"column":4},"generated":{"line":19,"column":53}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":84,"column":6},"generated":{"line":19,"column":55}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":81,"column":4},"generated":{"line":19,"column":65}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":85,"column":6},"generated":{"line":19,"column":67}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":81,"column":4},"generated":{"line":19,"column":74}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":86,"column":6},"generated":{"line":19,"column":76}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":81,"column":4},"generated":{"line":19,"column":86}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":89,"column":6},"generated":{"line":19,"column":88}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":81,"column":4},"generated":{"line":19,"column":97}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":92,"column":6},"generated":{"line":19,"column":99}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":81,"column":4},"generated":{"line":19,"column":103}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":93,"column":6},"generated":{"line":19,"column":105}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":81,"column":4},"generated":{"line":19,"column":114}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":81,"column":4},"generated":{"line":19,"column":115}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":94,"column":5},"generated":{"line":20,"column":2}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":80,"column":9},"generated":{"line":20,"column":3}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":80,"column":2},"generated":{"line":20,"column":4}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":96,"column":1},"generated":{"line":21,"column":0}}],"sources":{"../../../../src/internal/operators/expand.ts":"import { OperatorFunction, ObservableInput, ObservedValueOf, SchedulerLike } from '../types';\nimport { operate } from '../util/lift';\nimport { mergeInternals } from './mergeInternals';\n\n/* tslint:disable:max-line-length */\nexport function expand<T, O extends ObservableInput<unknown>>(\n  project: (value: T, index: number) => O,\n  concurrent?: number,\n  scheduler?: SchedulerLike\n): OperatorFunction<T, ObservedValueOf<O>>;\n/**\n * @deprecated The `scheduler` parameter will be removed in v8. If you need to schedule the inner subscription,\n * use `subscribeOn` within the projection function: `expand((value) => fn(value).pipe(subscribeOn(scheduler)))`.\n * Details: Details: https://rxjs.dev/deprecations/scheduler-argument\n */\nexport function expand<T, O extends ObservableInput<unknown>>(\n  project: (value: T, index: number) => O,\n  concurrent: number | undefined,\n  scheduler: SchedulerLike\n): OperatorFunction<T, ObservedValueOf<O>>;\n/* tslint:enable:max-line-length */\n\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * ![](expand.png)\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * ## Example\n *\n * Start emitting the powers of two on every click, at most 10 of them\n *\n * ```ts\n * import { fromEvent, map, expand, of, delay, take } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const powersOfTwo = clicks.pipe(\n *   map(() => 1),\n *   expand(x => of(2 * x).pipe(delay(1000))),\n *   take(10)\n * );\n * powersOfTwo.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Infinity] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {SchedulerLike} [scheduler=null] The {@link SchedulerLike} to use for subscribing to\n * each projected inner Observable.\n * @return A function that returns an Observable that emits the source values\n * and also result of applying the projection function to each value emitted on\n * the output Observable and merging the results of the Observables obtained\n * from this transformation.\n */\nexport function expand<T, O extends ObservableInput<unknown>>(\n  project: (value: T, index: number) => O,\n  concurrent = Infinity,\n  scheduler?: SchedulerLike\n): OperatorFunction<T, ObservedValueOf<O>> {\n  concurrent = (concurrent || 0) < 1 ? Infinity : concurrent;\n  return operate((source, subscriber) =>\n    mergeInternals(\n      // General merge params\n      source,\n      subscriber,\n      project,\n      concurrent,\n\n      // onBeforeNext\n      undefined,\n\n      // Expand-specific\n      true, // Use expand path\n      scheduler // Inner subscription scheduler\n    )\n  );\n}\n"},"lineCount":null}},"error":null,"hash":"364313f7e057764b8387072b870b5611","cacheData":{"env":{}}}