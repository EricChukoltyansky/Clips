{"id":"../node_modules/rxjs/dist/esm5/internal/observable/concat.js","dependencies":[{"name":"C:\\Appleseeds\\angular-project\\rxjs\\node_modules\\rxjs\\dist\\esm5\\internal\\observable\\concat.js.map","includedInParent":true,"mtime":1647189212438},{"name":"C:\\Appleseeds\\angular-project\\rxjs\\node_modules\\rxjs\\src\\internal\\observable\\concat.ts","includedInParent":true,"mtime":1647189212438},{"name":"C:\\Appleseeds\\angular-project\\rxjs\\package.json","includedInParent":true,"mtime":1625261731954},{"name":"C:\\Appleseeds\\angular-project\\rxjs\\node_modules\\rxjs\\package.json","includedInParent":true,"mtime":1647189212438},{"name":"../operators/concatAll","loc":{"line":1,"column":26,"index":26},"parent":"C:\\Appleseeds\\angular-project\\rxjs\\node_modules\\rxjs\\dist\\esm5\\internal\\observable\\concat.js","resolved":"C:\\Appleseeds\\angular-project\\rxjs\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\concatAll.js"},{"name":"../util/args","loc":{"line":2,"column":29,"index":81},"parent":"C:\\Appleseeds\\angular-project\\rxjs\\node_modules\\rxjs\\dist\\esm5\\internal\\observable\\concat.js","resolved":"C:\\Appleseeds\\angular-project\\rxjs\\node_modules\\rxjs\\dist\\esm5\\internal\\util\\args.js"},{"name":"./from","loc":{"line":3,"column":21,"index":118},"parent":"C:\\Appleseeds\\angular-project\\rxjs\\node_modules\\rxjs\\dist\\esm5\\internal\\observable\\concat.js","resolved":"C:\\Appleseeds\\angular-project\\rxjs\\node_modules\\rxjs\\dist\\esm5\\internal\\observable\\from.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.concat = concat;\n\nvar _concatAll = require(\"../operators/concatAll\");\n\nvar _args = require(\"../util/args\");\n\nvar _from = require(\"./from\");\n\nfunction concat() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  return (0, _concatAll.concatAll)()((0, _from.from)(args, (0, _args.popScheduler)(args)));\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":12,"column":0}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":113,"column":6},"generated":{"line":14,"column":0}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":113,"column":16},"generated":{"line":14,"column":9}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":113,"column":6},"generated":{"line":14,"column":15}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":113,"column":22},"generated":{"line":14,"column":18}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":113,"column":23},"generated":{"line":15,"column":2}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":113,"column":23},"generated":{"line":15,"column":6}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":113,"column":23},"generated":{"line":15,"column":10}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":113,"column":23},"generated":{"line":15,"column":13}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":113,"column":23},"generated":{"line":15,"column":15}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":113,"column":23},"generated":{"line":17,"column":7}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":113,"column":23},"generated":{"line":17,"column":11}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":113,"column":23},"generated":{"line":17,"column":13}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":113,"column":23},"generated":{"line":17,"column":16}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":113,"column":23},"generated":{"line":17,"column":19}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":113,"column":23},"generated":{"line":17,"column":21}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":113,"column":23},"generated":{"line":17,"column":24}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":113,"column":23},"generated":{"line":17,"column":33}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":113,"column":23},"generated":{"line":17,"column":34}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":113,"column":23},"generated":{"line":17,"column":42}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":113,"column":23},"generated":{"line":17,"column":44}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":113,"column":37},"generated":{"line":17,"column":48}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":113,"column":23},"generated":{"line":18,"column":4}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":113,"column":23},"generated":{"line":18,"column":8}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":113,"column":23},"generated":{"line":18,"column":9}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":113,"column":23},"generated":{"line":18,"column":11}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":113,"column":23},"generated":{"line":18,"column":12}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":113,"column":23},"generated":{"line":18,"column":15}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":113,"column":23},"generated":{"line":18,"column":24}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":113,"column":23},"generated":{"line":18,"column":25}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":113,"column":23},"generated":{"line":18,"column":27}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":113,"column":23},"generated":{"line":18,"column":28}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":114,"column":2},"generated":{"line":21,"column":2}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":114,"column":9},"generated":{"line":21,"column":9}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":114,"column":9},"generated":{"line":21,"column":13}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":114,"column":9},"generated":{"line":21,"column":33}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":114,"column":21},"generated":{"line":21,"column":37}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":114,"column":21},"generated":{"line":21,"column":41}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":114,"column":21},"generated":{"line":21,"column":51}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":114,"column":26},"generated":{"line":21,"column":53}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":114,"column":21},"generated":{"line":21,"column":57}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":114,"column":32},"generated":{"line":21,"column":59}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":114,"column":32},"generated":{"line":21,"column":63}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":114,"column":32},"generated":{"line":21,"column":81}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":114,"column":45},"generated":{"line":21,"column":83}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":114,"column":32},"generated":{"line":21,"column":87}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":114,"column":21},"generated":{"line":21,"column":88}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":114,"column":9},"generated":{"line":21,"column":89}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":114,"column":2},"generated":{"line":21,"column":90}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":115,"column":1},"generated":{"line":22,"column":0}}],"sources":{"../../../../src/internal/observable/concat.ts":"import { Observable } from '../Observable';\nimport { ObservableInputTuple, SchedulerLike } from '../types';\nimport { concatAll } from '../operators/concatAll';\nimport { popScheduler } from '../util/args';\nimport { from } from './from';\n\nexport function concat<T extends readonly unknown[]>(...inputs: [...ObservableInputTuple<T>]): Observable<T[number]>;\nexport function concat<T extends readonly unknown[]>(\n  ...inputsAndScheduler: [...ObservableInputTuple<T>, SchedulerLike]\n): Observable<T[number]>;\n\n/**\n * Creates an output Observable which sequentially emits all values from the first given\n * Observable and then moves on to the next.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * ![](concat.png)\n *\n * `concat` joins multiple Observables together, by subscribing to them one at a time and\n * merging their results into the output Observable. You can pass either an array of\n * Observables, or put them directly as arguments. Passing an empty array will result\n * in Observable that completes immediately.\n *\n * `concat` will subscribe to first input Observable and emit all its values, without\n * changing or affecting them in any way. When that Observable completes, it will\n * subscribe to then next Observable passed and, again, emit its values. This will be\n * repeated, until the operator runs out of Observables. When last input Observable completes,\n * `concat` will complete as well. At any given moment only one Observable passed to operator\n * emits values. If you would like to emit values from passed Observables concurrently, check out\n * {@link merge} instead, especially with optional `concurrent` parameter. As a matter of fact,\n * `concat` is an equivalent of `merge` operator with `concurrent` parameter set to `1`.\n *\n * Note that if some input Observable never completes, `concat` will also never complete\n * and Observables following the one that did not complete will never be subscribed. On the other\n * hand, if some Observable simply completes immediately after it is subscribed, it will be\n * invisible for `concat`, which will just move on to the next Observable.\n *\n * If any Observable in chain errors, instead of passing control to the next Observable,\n * `concat` will error immediately as well. Observables that would be subscribed after\n * the one that emitted error, never will.\n *\n * If you pass to `concat` the same Observable many times, its stream of values\n * will be \"replayed\" on every subscription, which means you can repeat given Observable\n * as many times as you like. If passing the same Observable to `concat` 1000 times becomes tedious,\n * you can always use {@link repeat}.\n *\n * ## Examples\n *\n * Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10\n *\n * ```ts\n * import { interval, take, range, concat } from 'rxjs';\n *\n * const timer = interval(1000).pipe(take(4));\n * const sequence = range(1, 10);\n * const result = concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n * ```\n *\n * Concatenate 3 Observables\n *\n * ```ts\n * import { interval, take, concat } from 'rxjs';\n *\n * const timer1 = interval(1000).pipe(take(10));\n * const timer2 = interval(2000).pipe(take(6));\n * const timer3 = interval(500).pipe(take(10));\n *\n * const result = concat(timer1, timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n * ```\n *\n * Concatenate the same Observable to repeat it\n *\n * ```ts\n * import { interval, take, concat } from 'rxjs';\n *\n * const timer = interval(1000).pipe(take(2));\n *\n * concat(timer, timer) // concatenating the same Observable!\n *   .subscribe({\n *     next: value => console.log(value),\n *     complete: () => console.log('...and it is done!')\n *   });\n *\n * // Logs:\n * // 0 after 1s\n * // 1 after 2s\n * // 0 after 3s\n * // 1 after 4s\n * // '...and it is done!' also after 4s\n * ```\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link startWith}\n * @see {@link endWith}\n *\n * @param args Input Observables to concatenate.\n */\nexport function concat(...args: any[]): Observable<unknown> {\n  return concatAll()(from(args, popScheduler(args)));\n}\n"},"lineCount":null}},"error":null,"hash":"3c076eaf84721f1f41699e2d2e3f7417","cacheData":{"env":{}}}